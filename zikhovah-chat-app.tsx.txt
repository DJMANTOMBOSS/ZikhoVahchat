import React, { useState, useEffect, useRef } from 'react';
import { Phone, Video, Mic, Image, Send, Smile } from 'lucide-react';

// Mock data for contacts and messages (in a real app, this would come from a backend)
const mockContacts = [
  { id: 1, name: 'Alice Johnson', avatar: '/api/placeholder/50/50' },
  { id: 2, name: 'Bob Smith', avatar: '/api/placeholder/50/50' },
  { id: 3, name: 'Charlie Brown', avatar: '/api/placeholder/50/50' }
];

const mockMessages = {
  1: [
    { id: 1, sender: 1, text: 'Hey there!', timestamp: '10:30 AM' },
    { id: 2, sender: 'me', text: 'Hi Alice, how are you?', timestamp: '10:31 AM' }
  ],
  2: [
    { id: 1, sender: 2, text: 'Meeting at 3?', timestamp: '11:15 AM' },
    { id: 2, sender: 'me', text: 'Yes, I\'ll be there', timestamp: '11:16 AM' }
  ]
};

// Main ZikhoVah Chat App Component
const ZikhoVahApp = () => {
  const [selectedContact, setSelectedContact] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [isVideoCallActive, setIsVideoCallActive] = useState(false);
  const messagesEndRef = useRef(null);

  // Scroll to bottom of messages
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    if (selectedContact) {
      setMessages(mockMessages[selectedContact.id] || []);
    }
  }, [selectedContact]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = () => {
    if (newMessage.trim() && selectedContact) {
      const newMessageObj = {
        id: messages.length + 1,
        sender: 'me',
        text: newMessage,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      };
      setMessages([...messages, newMessageObj]);
      setNewMessage('');
    }
  };

  const startVideoCall = () => {
    setIsVideoCallActive(true);
  };

  const endVideoCall = () => {
    setIsVideoCallActive(false);
  };

  return (
    <div className="flex h-screen bg-gradient-to-br from-purple-100 to-blue-100">
      {/* Sidebar for Contacts */}
      <div className="w-1/4 bg-white border-r shadow-lg overflow-y-auto">
        <div className="p-4 bg-purple-600 text-white font-bold">
          ZikhoVah Messenger
        </div>
        {mockContacts.map(contact => (
          <div 
            key={contact.id} 
            className={`flex items-center p-4 hover:bg-gray-100 cursor-pointer ${selectedContact?.id === contact.id ? 'bg-gray-200' : ''}`}
            onClick={() => setSelectedContact(contact)}
          >
            <img 
              src={contact.avatar} 
              alt={contact.name} 
              className="w-12 h-12 rounded-full mr-4" 
            />
            <div>
              <div className="font-semibold">{contact.name}</div>
              <div className="text-sm text-gray-500">Last message...</div>
            </div>
          </div>
        ))}
      </div>

      {/* Main Chat Area */}
      <div className="flex flex-col w-3/4">
        {/* Chat Header */}
        {selectedContact ? (
          <div className="flex justify-between items-center p-4 bg-white shadow-md">
            <div className="flex items-center">
              <img 
                src={selectedContact.avatar} 
                alt={selectedContact.name} 
                className="w-12 h-12 rounded-full mr-4" 
              />
              <div>
                <div className="font-semibold">{selectedContact.name}</div>
                <div className="text-sm text-gray-500">Online</div>
              </div>
            </div>
            <div className="flex space-x-4">
              <button 
                onClick={startVideoCall} 
                className="text-purple-600 hover:bg-purple-100 p-2 rounded-full"
              >
                <Video />
              </button>
              <button className="text-purple-600 hover:bg-purple-100 p-2 rounded-full">
                <Phone />
              </button>
            </div>
          </div>
        ) : (
          <div className="flex items-center justify-center h-20 bg-white shadow-md">
            Select a contact to start chatting
          </div>
        )}

        {/* Messages Area */}
        <div className="flex-grow overflow-y-auto p-4 bg-gradient-to-br from-purple-50 to-blue-50">
          {messages.map((msg) => (
            <div 
              key={msg.id} 
              className={`flex mb-4 ${msg.sender === 'me' ? 'justify-end' : 'justify-start'}`}
            >
              <div 
                className={`max-w-md p-3 rounded-lg ${
                  msg.sender === 'me' 
                    ? 'bg-purple-600 text-white' 
                    : 'bg-white text-black shadow-md'
                }`}
              >
                {msg.text}
                <div className="text-xs opacity-70 mt-1 text-right">
                  {msg.timestamp}
                </div>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        {/* Message Input Area */}
        {selectedContact && (
          <div className="bg-white p-4 flex items-center space-x-4">
            <button className="text-purple-600 hover:bg-purple-100 p-2 rounded-full">
              <Smile />
            </button>
            <button className="text-purple-600 hover:bg-purple-100 p-2 rounded-full">
              <Image />
            </button>
            <button className="text-purple-600 hover:bg-purple-100 p-2 rounded-full">
              <Mic />
            </button>
            <input 
              type="text" 
              placeholder="Type a message" 
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              className="flex-grow p-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-purple-500"
            />
            <button 
              onClick={sendMessage}
              className="bg-purple-600 text-white p-2 rounded-full hover:bg-purple-700"
            >
              <Send />
            </button>
          </div>
        )}
      </div>

      {/* Video Call Modal */}
      {isVideoCallActive && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl text-center">
            <div className="text-2xl mb-4">Video Call with {selectedContact.name}</div>
            <div className="mb-4">
              <img 
                src={selectedContact.avatar} 
                alt={selectedContact.name} 
                className="w-48 h-48 rounded-full mx-auto mb-4" 
              />
              <div className="text-lg">00:05:32</div>
            </div>
            <div className="flex justify-center space-x-4">
              <button 
                onClick={endVideoCall}
                className="bg-red-500 text-white p-3 rounded-full hover:bg-red-600"
              >
                End Call
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ZikhoVahApp;
